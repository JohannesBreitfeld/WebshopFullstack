@page "/products"
@using System.Net.Http.Json
@using System.Collections.ObjectModel
@using Webshop.Domain.Enums
@inject CustomAuthStateProvider AuthStateProvider
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject ISnackbar Snackbar

@if (Role == "Admin")
{
    <MudDataGrid T="ProductModel" Readonly="false" Items="@AllProducts" SortMode="SortMode.Multiple" QuickFilter="@_quickFilter"
    EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual" CommittedItemChanges="@CommittedItemChanges" CanceledEditingItem="@CancelledItemChanges" @ref="MudDataGridRef">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Products</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="AddNewProduct">
                Lägg till produkt
            </MudButton>
        </ToolBarContent>
        <Columns>
            <TemplateColumn Sortable="false">
                <CellTemplate>
                    <img src="@context.Item.ImageUrl" alt="@context.Item.Name" width="100" style="border-radius: 5px;" />
                </CellTemplate>
                <EditTemplate>
                    <MudTextField Label="Bild-URL" @bind-Value="@context.Item.ImageUrl" />
                </EditTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Id" Editable="false" Title="Produktnummer"/>
            <PropertyColumn Property="x => x.Name" />
            <PropertyColumn Property="x => x.Price" />
            <PropertyColumn Property="x => x.Description" Sortable="false" />
            <TemplateColumn Title="Kategori">
                <CellTemplate>
                    @{
                        var categoryName = Categories?.FirstOrDefault(c => c.Id == context.Item.CategoryId)?.Name ?? context.Item.CategoryId.ToString();
                    }
                    <MudText>@categoryName</MudText>
                </CellTemplate>
                <EditTemplate>
                    <MudSelect Label="Kategori" @bind-Value="@context.Item.CategoryId">
                        @if (Categories != null)
                        {
                            @foreach (var category in Categories)
                            {
                                <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </EditTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Status" Title="Status" >
                <EditTemplate>
                    <MudSelect T="ProductStatus" Label="Status" @bind-Value="context.Item.Status">
                        @foreach (var status in Enum.GetValues(typeof(ProductStatus)).Cast<ProductStatus>())
                        {
                            <MudSelectItem T="ProductStatus" Value="@status">@status</MudSelectItem>
                        }
                    </MudSelect>
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.StockBalance" Title="Antal på lager" />
            <TemplateColumn>
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="ProductModel" />
        </PagerContent>
    </MudDataGrid>
}
@code {
    private IEnumerable<ProductModel>? AllProducts = new ObservableCollection<ProductModel>();
    private string? _searchString;
    private string? Role;
    private IEnumerable<CategoryModel>? Categories;
    private ProductModel? _newProduct;
    private MudDataGrid<ProductModel>? MudDataGridRef;

    // quick filter - filter globally across multiple columns with the same input
    private Func<ProductModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Id.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AllProducts = await ProductService.GetAllAsync();
            Categories = await CategoryService.GetAllAsync();

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                Role = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
            }
            StateHasChanged();
        }
    }
    private async Task CommittedItemChanges(ProductModel item)
    {
        if (item.Id == 0)
        {
            var model = await ProductService.AddProductAsync(item);
            if (model != null)
            {
                Snackbar.Add($"{item.Name} har lagt till med produktnummer {model.Id}!", Severity.Success, c => c.SnackbarVariant = Variant.Filled);
                item.Id = model.Id;
            }
            else
            {
                Snackbar.Add($"{item.Name} kunde inte läggas till", Severity.Error, c => c.SnackbarVariant = Variant.Filled);
            }
        }
        else
        {


            var success = await ProductService.UpdateAsync(item);
            if (success)
            {
                Snackbar.Add($"Produktnummer {item.Id} har uppdaterats!", Severity.Success, c => c.SnackbarVariant = Variant.Filled);
            }
            else
            {
                Snackbar.Add($"Uppdatering av produktnummer {item.Id} misslyckades!", Severity.Error, c => c.SnackbarVariant = Variant.Filled);
            }
        }

    }

    private async Task AddNewProduct()
    {
        _newProduct = new ProductModel
            {
                Id = 0, 
                Name = "",
                Price = 0,
                Description = "",
                StockBalance = 0,
                ImageUrl = "",
                CategoryId = Categories.FirstOrDefault()?.Id ?? 0,
                Status = ProductStatus.Active           
            };

        var productList = AllProducts.ToList();
        productList.Add(_newProduct);
        AllProducts = productList;

        await InvokeAsync(() => MudDataGridRef.SetEditingItemAsync(_newProduct));
    }

    private void CancelledItemChanges(ProductModel product)
    {
        if (product.Id == 0)
        {
            var productList = AllProducts.ToList();
            productList.Remove(_newProduct);
            AllProducts = productList;   
        }
    }
}
