@page "/login"
@inject IHttpClientFactory HttpClientFactory
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudPaper Class="pa-4 mx-auto my-6" MaxWidth="500px">
        <MudText Typo="Typo.h5" Class="mb-4">Logga in</MudText>

<EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudTextField InputType="InputType.Email" @bind-Value="loginRequest.Email" Label="Username" Required="true" Class=""/>
    <MudTextField Class="mt-6" InputType="InputType.Password" @bind-Value="loginRequest.Password" Label="Password" Type="password" Required="true" />

       <div class="d-flex gap-2 mt-6">
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="HandleLogin">
                Logga in
            </MudButton>
            <MudSpacer></MudSpacer>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.PersonAdd" OnClick="@NavigateToRegister">
                Registrera nytt konto
            </MudButton>
        </div>
</EditForm>
</MudPaper>

@code {
    private LoginUserRequest loginRequest = new LoginUserRequest();

    private async Task HandleLogin()
    {
        var client = HttpClientFactory.CreateClient("API");
        var response = await client.PostAsJsonAsync("api/auth/login", loginRequest);

        if (response.IsSuccessStatusCode)
        {
            var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();

            if (authResponse is not null)
            {
                var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
                await customAuthStateProvider.MarkUserAsAuthenticated(authResponse.Token, authResponse.Customer);

                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
        }
        else
        {
            Snackbar.Add("Inloggningen misslyckades!", Severity.Error, c => c.SnackbarVariant = Variant.Filled);
        }
        StateHasChanged();
    }
    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }
}