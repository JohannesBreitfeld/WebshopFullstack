@page "/login"
@inject IHttpClientFactory HttpClientFactory
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation

<EditForm Model="loginRequest" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudTextField InputType="InputType.Email" @bind-Value="loginRequest.Email" Label="Username" Required="true" Class=""/>
    <MudTextField InputType="InputType.Password" @bind-Value="loginRequest.Password" Label="Password" Type="password" Required="true" />

    <MudButton Class="LoginButton" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="HandleLogin">Log in</MudButton>
</EditForm>
<p>@message</p>

@code {
    private LoginUserRequest loginRequest = new LoginUserRequest();
    private string message = "";

    private async Task HandleLogin()
    {
        var client = HttpClientFactory.CreateClient("API");
        var response = await client.PostAsJsonAsync("api/auth/login", loginRequest);

        if (response.IsSuccessStatusCode)
        {
            var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();

            if (authResponse is not null)
            {
                await AuthStateProvider.MarkUserAsAuthenticated(authResponse.Token, authResponse.Role, authResponse.Customer);
                Navigation.NavigateTo("/");
            }
        }
        else
        {
            message = "Login failed";
        }
    }
}