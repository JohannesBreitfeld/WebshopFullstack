@page "/profile"
@using Microsoft.AspNetCore.Authorization
@using Webshop.Application.DTOs.Requests
@inject CustomAuthStateProvider AuthStateProvider
@inject OrderService OrderService

<MudContainer>
    <MudCard>
        <MudCardContent>
            <MudTypography Variant="H4">Profil</MudTypography>

            <!-- Redigera kunduppgifter -->
            <MudTextField Label="Förnamn" @bind-Value="CustomerInfo.FirstName" Variant="Variant.Outlined" />
            <MudTextField Label="Efternamn" @bind-Value="CustomerInfo.LastName" Variant="Variant.Outlined" />
            <MudTextField Label="E-post" @bind-Value="CustomerInfo.Email" Variant="Variant.Outlined" Disabled="true" />
            <MudTextField Label="Adress" @bind-Value="CustomerInfo.StreetAdress" Variant="Variant.Outlined" />
            <MudTextField Label="Postnummer" @bind-Value="CustomerInfo.PostalCode" Variant="Variant.Outlined" />
            <MudTextField Label="Stad" @bind-Value="CustomerInfo.City" Variant="Variant.Outlined" />
            <MudButton Color="Color.Primary" OnClick="UpdateCustomerInfo">Spara ändringar</MudButton>

            <MudDivider />

            <!-- Orderhistorik -->
            @if (OrderHistory is null)
            {
                <MudText>Inga ordrar hittades</MudText>
            }
            else
            {           
                <MudTable Items="@OrderHistory" Hover="true">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Kund-ID</MudTh>
                        <MudTh>Datum</MudTh>
                        <MudTh></MudTh>

                    </HeaderContent>

                    <RowTemplate Context="order">
                        <MudTd>@order.Id</MudTd>
                        <MudTd>@order.CustomerId</MudTd>
                        <MudTd>@order.DateTime.ToString("yyyy-MM-dd HH:mm")</MudTd>
                        <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(order.Id))">@((order.ShowDetails == true) ? "Hide" : "Show") Address Details</MudButton></MudTd>
                    </RowTemplate>
                    <ChildRowContent>
                        @if (context.ShowDetails)
                        {
                            <MudTr>
                                <td colspan="4">
                                    <MudCard Elevation="0">
                                        <MudCardHeader>
                                            <CardHeaderContent>
                                                <MudText Typo="Typo.body1">Produkter för order <strong>@context.Id</strong></MudText>
                                            </CardHeaderContent>
                                        </MudCardHeader>
                                        <MudCardContent Class="pa-0">
                                            <MudTable Items="@context.Products" Context="ProductsContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                                <ColGroup>
                                                    <col />
                                                    <col />
                                                    <col style="width:200px;" />
                                                </ColGroup>
                                                <HeaderContent>
                                                    <MudTh>Produktnummer</MudTh>
                                                    <MudTh>Produktnamn</MudTh>
                                                    <MudTh>Antal</MudTh>
                                                </HeaderContent>
                                                <RowTemplate>
                                                    <MudTd DataLabel="Address Line 1">@ProductsContext.ProductId</MudTd>
                                                    <MudTd DataLabel="Address Line 2">@ProductsContext.ProductName</MudTd>
                                                    <MudTd DataLabel="Postal Code">@ProductsContext.Quantity</MudTd>
                                                </RowTemplate>
                                            </MudTable>
                                        </MudCardContent>
                                    </MudCard>
                                </td>
                            </MudTr>
                        }
                    </ChildRowContent>
                </MudTable>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private UpdateCustomerRequest CustomerInfo { get; set; } = new();
    private List<OrderModel>? OrderHistory = new();
    private int UserId { get; set; }
    private HashSet<int> expandedOrders = new();

    [Inject] private CustomerService CustomerService { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var customer = await AuthStateProvider.GetCustomerDataAsync();
            if (customer != null)

            {
                UserId = customer.Id;
                CustomerInfo = new UpdateCustomerRequest
                    {
                        FirstName = customer.FirstName,
                        LastName = customer.LastName,
                        Email = customer.Email,
                        StreetAdress = customer.StreetAdress,
                        PostalCode = customer.PostalCode,
                        City = customer.City
                    };
                await LoadOrderHistoryAsync();
            }
            StateHasChanged();
        }
    }

    private async Task UpdateCustomerInfo()
    {
        var updatedCustomer = await CustomerService.UpdateCustomerAddressAsync(UserId, CustomerInfo);

        if (updatedCustomer != null)
        {
            Snackbar.Add("Kunduppgifter uppdaterade!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Misslyckades med att uppdatera kunduppgifterna.", Severity.Error);
        }
    }

    private async Task LoadOrderHistoryAsync()
    {
        var response = await OrderService.GetOrderByCustomerId(UserId);
        if (response is null || response.Items.Count() == 0)
        {
            OrderHistory = null;
        }
        else
        {
            foreach (var order in response.Items)
            {
                OrderHistory.Add(new OrderModel()
                    {
                        Id = order.Id,
                        CustomerId = order.CustomerId,
                        DateTime = order.DateTime,
                        Products = order.Products,
                        ShowDetails = false
                    });
            }
        }
    }

    private void ShowBtnPress(int nr)
    {
        OrderModel tmpOrder = OrderHistory.First(f => f.Id == nr);
        tmpOrder.ShowDetails = !tmpOrder.ShowDetails;
    }
}


