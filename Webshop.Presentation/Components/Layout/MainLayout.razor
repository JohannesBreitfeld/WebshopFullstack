@inherits LayoutComponentBase
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject CartService CartService
@inject IDialogService DialogService

<MudThemeProvider Theme="@_theme" IsDarkMode="!_isDarkMode" /> 
<MudPopoverProvider /> 
<MudDialogProvider /> 
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Color="Color.Primary">
        <MudIconButton OnClick="DrawerToggle" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Class="d-md-none" />
        <MudText Typo="Typo.h6" Class="mr-4">Guns & Ammo</MudText>

        <!-- Center Navigation Links -->
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudContainer MaxWidth="MaxWidth.False" Class="d-flex justify-center">
                <MudNavLink Href="/" Match="NavLinkMatch.All" Class="mx-auto">Hem</MudNavLink>
                <MudNavLink Href="/shop" Match="NavLinkMatch.Prefix" Class="mx-auto">Shop</MudNavLink>
                <MudNavLink Href="/weather" Match="NavLinkMatch.Prefix" Class="mx-auto">Weather</MudNavLink>
                @if(role == "Admin")
                {
                    <MudMenu Icon="@Icons.Material.Filled.AccountCircle">
                        <MudMenuItem>
                            <MudNavLink Href="/customers">Alla kunder</MudNavLink>
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudNavLink Href="/order-overview">Alla ordrar</MudNavLink>
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudNavLink Href="/products">Alla produkter</MudNavLink>
                        </MudMenuItem>
                    </MudMenu>
                }
           
            </MudContainer>
        </MudHidden>

        <MudSpacer />
        @if(@role is not null)
        {
            if(role == "Admin")
            {
                <MudText>Inloggad som admin</MudText>
            }
            else if(@role == "Customer")
            {
                if(customerData is not null)
                {
                    <MudButton OnClick="GoToProfile">Inloggad som @customerData.FirstName @customerData.LastName</MudButton>
                }
            }
        }

        <!-- Conditional Login/Logout Button -->
        @if (isAuthenticated)
        {
            <MudButton Color="Color.Secondary" OnClick="@Logout" Class="d-none d-md-flex">
                Logga ut
            </MudButton>
        }
        else
        {
            <MudButton OnClick="GoToLogin" Color="Color.Secondary" Class="d-none d-md-flex">
                Logga in
            </MudButton>
        }
        <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart"
        OnClick="@ShowCart"
        Color="Color.Inherit">
            <MudBadge BadgeColor="Color.Secondary" Content="@numberOfCartItems" />
        </MudIconButton>
    </MudAppBar>

    <MudDrawer Open="@_drawerOpen" OnClose="CloseDrawer" Class="d-md-none" Anchor="Anchor.Left">
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
            <MudNavLink Href="/counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Counter</MudNavLink>
            <MudNavLink Href="/weather" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Weather</MudNavLink>

            <!-- Conditional Login/Logout Button in Drawer -->
            @if (isAuthenticated)
            {
                <MudNavLink OnClick="@Logout" Icon="@Icons.Material.Filled.Logout">Logga ut</MudNavLink>
            }
            else
            {
                <MudNavLink Href="/login" Icon="@Icons.Material.Filled.Login">Logga in</MudNavLink>
            }
            <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart"
            OnClick="@ShowCart"
            Color="Color.Inherit">
                <MudBadge BadgeColor="Color.Secondary" Content="@CartService.Items.Count" />
            </MudIconButton>
        </MudNavMenu>
    </MudDrawer>

    <MudDrawer @bind-Open="_cartOpen" Anchor="Anchor.Right" Elevation="4" Width="300px" ClipMode="DrawerClipMode.Always">
        <MudDrawerHeader>Kundvagn</MudDrawerHeader>

        @if (CartService.Items.Any())
        {
            @foreach (var item in CartService.Items)
            {
                <MudPaper Class="p-2 mb-2">
                    <MudText>@item.Name x @item.Quantity</MudText>
                    <MudText Typo="Typo.caption">@($"{item.Price * item.Quantity}")</MudText>
                </MudPaper>
            }

            <MudDivider Class="my-2" />
            <MudText Typo="Typo.subtitle1">Totalt: @CartService.Total:C</MudText>

            <MudButton Color="Color.Error" Variant="Variant.Outlined" Class="mt-2" OnClick="ClearCart">
                Töm kundvagnen
            </MudButton>

            <MudDivider Class="my-2" />

            @if (isAuthenticated)
            {
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="mt-2" OnClick="PlaceOrder">
                    Slutför beställning
                </MudButton>
            }
            else
            {
                <MudText Typo="Typo.body1" Class="mt-2">Du måste vara inloggad för att slutföra din order.</MudText>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="GoToLogin">
                    Logga in
                </MudButton>
            }
        }
        else
        {
            <MudText>Din kundvagn är tom.</MudText>
        }
    </MudDrawer>

    <MudMainContent>
        <MudContainer Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private bool _drawerOpen = false;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private CustomerResponse? customerData;
    private string? role;
    private bool isAuthenticated = false;
    private bool _cartOpen = false;
    private int numberOfCartItems;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
                role = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
                customerData = await AuthStateProvider.GetCustomerDataAsync();
            }
            base.OnInitialized();
            await CartService.LoadCartAsync();
            CartService.OnCartChanged += StateHasChanged;
            numberOfCartItems = CartService.Items.Count();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _theme = new()
        {
            PaletteLight = _lightPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
        StateHasChanged();
    }

    private void ShowCart()
    {
        _cartOpen = !_cartOpen;
    }
    private async Task ClearCart()
    {
        await CartService.ClearCartAsync();
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private async Task Logout()
    {
        await AuthStateProvider.Logout();
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private void GoToLogin() => Navigation.NavigateTo("/login");
    private void GoToHome() => Navigation.NavigateTo("/");
    private void GoToProfile() => Navigation.NavigateTo("/profile");

    private async Task PlaceOrder()
    {
        if(customerData is null)
        {
            return;
        }
        if(CartService.Items is null || CartService.Items.Count == 0)
        {
            return;
        }

        var success = await CartService?.PlaceOrderAsync(customerData.Id, CartService.Items);

        if (success)
        {
            await CartService.ClearCartAsync();
        }
    }


    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


