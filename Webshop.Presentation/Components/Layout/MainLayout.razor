@inherits LayoutComponentBase
@inject CustomAuthStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject CartService CartService
@inject IDialogService DialogService

<MudThemeProvider Theme="@_theme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudPaper Elevation="4" Class="p2" Style="background-color: #CBB994 ;">
        <!-- Första raden: Logo och login/cart -->
        <MudGrid AlignItems="Center" Class="header-background">
            <!-- Kolumn 1: Tom för att balansera layouten -->
            <MudItem xs="4" />

            <!-- Kolumn 2: Logotyp centrerad -->
            <MudItem xs="4" Class="d-flex justify-center">
                <img src="Media/SolidLogo.png" alt="Logo" style="height: 100px;" />
            </MudItem>

            <!-- Kolumn 3: Login och kundvagn till höger -->
            <MudItem xs="4" Class="d-flex justify-end align-center gap-2">
             
                @if (role == "Admin")
                {
                    <MudMenu Icon="@Icons.Material.Filled.Settings">
                        <MudMenuItem>
                            <MudNavLink Href="/customers">Alla kunder</MudNavLink>
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudNavLink Href="/order-overview">Alla ordrar</MudNavLink>
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudNavLink Href="/products">Alla produkter</MudNavLink>
                        </MudMenuItem>

                    </MudMenu>
                }
                <MudMenu Icon="@Icons.Material.Filled.AccountCircle">
                    @if (isAuthenticated)
                    {
                        <MudMenuItem><MudNavLink OnClick="@Logout">Logga ut</MudNavLink></MudMenuItem>
                    }
                    else
                    {
                        <MudMenuItem><MudNavLink Href="/Login">Logga in</MudNavLink></MudMenuItem>
                        <MudMenuItem><MudNavLink Href="/Register">Registrera ny kund</MudNavLink></MudMenuItem>
                    }
                    @if (role == "Customer")
                    {
                        <MudMenuItem><MudNavLink Href="/Profile">Min profil</MudNavLink></MudMenuItem>
                    }

                </MudMenu>

                <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart"
                               OnClick="@ShowCart"
                               Color="Color.Inherit">
                    <MudBadge BadgeColor="Color.Secondary" Content="@CartService.Items.Count" />
                </MudIconButton>

            </MudItem>
        </MudGrid>

        <!-- Andra raden: Meny centrerad -->
        <MudGrid>
            <MudItem xs="4"></MudItem>

            <MudItem xs="4" Class="d-flex justify-center gap-4">
                <MudNavLink Href="/" Match="NavLinkMatch.All"
                            Class="d-flex justify-center align-center px-4 py-2"
                            Style="height: 100%;">
                    <MudText Align="Align.Center">Hem</MudText>
                </MudNavLink>

                <MudNavLink Href="/shop" Match="NavLinkMatch.Prefix"
                            Class="d-flex justify-center align-center px-4 py-2"
                            Style="height: 100%;">
                    <MudText Align="Align.Center">Shop</MudText>
                </MudNavLink>
            </MudItem>

            <MudItem xs="4" Class="d-flex justify-end align-center px-4 py-2">
                @if (role is not null)
                {
                    if (role == "Admin")
                    {
                        <MudText>Inloggad som admin</MudText>
                    }
                    else if (role == "Customer" && customerData is not null)
                    {
                        <MudButton OnClick="GoToProfile">
                            Inloggad som @customerData.FirstName @customerData.LastName
                        </MudButton>
                    }
                }
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudDrawer @bind-Open="_cartOpen" Anchor="Anchor.Right" Elevation="4" Width="300px" ClipMode="DrawerClipMode.Always">
        <MudDrawerHeader>Kundvagn</MudDrawerHeader>

        @if (CartService.Items.Any())
        {
            @foreach (var item in CartService.Items)
            {
                <MudPaper Class="p-2 mb-2">
                    <MudText>@item.Name x @item.Quantity</MudText>
                    <MudText Typo="Typo.caption">@($"{item.Price * item.Quantity} kr")</MudText>
                </MudPaper>
            }

            <MudDivider Class="my-2" />
            <MudText Typo="Typo.subtitle1">Totalt: @CartService.Total kr</MudText>
            <MudSpacer></MudSpacer>
            <MudSpacer></MudSpacer>
            <MudButton Color="Color.Error" Variant="Variant.Outlined" Class="mt-2" OnClick="ClearCart">
                Töm kundvagnen
            </MudButton>

            <MudDivider Class="my-2" />

            @if (isAuthenticated)
            {
                <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="my-3" OnClick="PlaceOrder">
                    Slutför beställning
                </MudButton>
            }
            else
            {
                <MudText Typo="Typo.body1" >Du måste vara inloggad för att slutföra din order.</MudText>
                <MudButton Color="Color.Primary" Class="my-3" Variant="Variant.Filled" OnClick="GoToLogin">
                    Logga in
                </MudButton>
            }
        }
        else
        {
            <MudText>Din kundvagn är tom.</MudText>
        }
    </MudDrawer>

    <MudMainContent>
        <MudContainer Class="mt-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    private MudTheme? _theme = null;
    private CustomerResponse? customerData;
    private string? role;
    private bool isAuthenticated = false;
    private bool _cartOpen = false;
    private int numberOfCartItems;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity != null && user.Identity.IsAuthenticated)
            {
                isAuthenticated = true;
                role = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
                customerData = await AuthStateProvider.GetCustomerDataAsync();
            }
            base.OnInitialized();
            await CartService.LoadCartAsync();
            CartService.OnCartChanged += StateHasChanged;
            numberOfCartItems = CartService.Items.Count();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _theme = new()
            {
                PaletteLight = _lightPalette,
                LayoutProperties = new LayoutProperties()
            };
    }

    private void ShowCart()
    {
        _cartOpen = !_cartOpen;
    }
    private async Task ClearCart()
    {
        await CartService.ClearCartAsync();
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private async Task Logout()
    {
        await AuthStateProvider.Logout();
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }

    private void GoToLogin() => Navigation.NavigateTo("/login");
    private void GoToHome() => Navigation.NavigateTo("/");
    private void GoToProfile() => Navigation.NavigateTo("/profile");

    private async Task PlaceOrder()
    {
        if (customerData is null)
        {
            return;
        }
        if (CartService.Items is null || CartService.Items.Count == 0)
        {
            return;
        }

        var success = await CartService?.PlaceOrderAsync(customerData.Id, CartService.Items);

        if (success)
        {
            await CartService.ClearCartAsync();
        }
    }

}


